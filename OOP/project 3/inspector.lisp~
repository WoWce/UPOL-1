(defclass inspected-window (window)
  ())

(defmethod window-mouse-down ((w inspected-window) button position)
  (let ((shape (find-clicked-shape w position)))
    (if shape
        (progn 
          (mouse-down-inside-shape w shape button position)
          (send-event w 'show-obj position))
      (progn
        (mouse-down-no-shape w button position)
        (send-event w 'window-info)))))


;(defmethod window-mouse-down ((i inspected-window) button position)
;  (send-event i 'show-obj position))

(defmethod change ((i inspected-window) message changed-obj args)
  (call-next-method)
  (send-event i 'update-info changed-obj))

(defclass inspector-window (window)
  (inspected-window))

(defmethod set-inspected-window ((irw inspector-window) window)
  (setf (slot-value irw 'inspected-window) window)
  (set-delegate (inspected-window irw) irw))

(defmethod inspected-window ((irw inspector-window))
  (slot-value irw 'inspected-window))

;(defmethod info ((irw inspector-window))
;  (setf (slot-value irw (shape-info irw))))

(defun shape-info (shape)
  (let ((b (make-instance 'picture))
        (c nil)
        (info)
        (position 25)
        (cl))
    (move (set-text (setf cl (make-instance 'prop-text-shape)) (format nil "CLASS ~s" (type-of shape))) 0 10)
    (dolist (x (properties shape))
      (move (setf c (make-instance 'prop-text-shape)) 0 position)
      (setf position (+ position 15))
      (set-text c (format nil "~s = ~s" x (funcall x shape)))
      (set-object c shape)
      (set-property c x)
      (setf info (cons c info)))
    (setf info (cons cl info))
    (set-items b info)
    b))


(defmethod show-obj ((irw inspector-window) sender position)
  (set-shape irw (shape-info (find-clicked-shape sender position))))

(defmethod window-click-info ((irw inspector-window) sender)
  (set-shape irw (shape-info sender)))

(defmethod window-info ((irw inspector-window))
  (set-shape irw (shape-info irw)))

(defmethod update-info ((irw inspector-window) sender changed-obj)
  (set-shape irw (shape-info changed-obj)))

;;; Klikani

(defun dialog-window ()
  (first (multiple-value-list
   (capi:prompt-for-value "Zadejte novou hodnotu"))))

(defmethod window-double-click ((irw window) button position)
  (window-mouse-down irw button position)
  (let ((obj (find-clicked-shape irw position)))
    (if obj
        (funcall (setter-name (property (find-clicked-shape irw position))) (object (find-clicked-shape irw position)) (dialog-window)))))

(defmethod install-double-click-callback ((irw inspector-window))
  (mg:set-callback 
   (mg-window irw) 
   :double-click (lambda (mgw button x y)
		 (declare (ignore mgw))
		 (window-double-click 
                  irw
                  button 
                  (move (make-instance 'point) x y)))))

(defmethod install-callbacks ((irw inspector-window))
  (call-next-method)
  (install-double-click-callback irw)
  irw)



(defun setter-name (property-name)
(find-symbol (format nil "SET-~a" property-name)))


#|
(setf irw (make-instance 'inspector-window))
(setf idw (make-instance 'inspected-window))
(setf cr (make-instance 'circle))
(move (setf a (make-instance 'point)) 20 20)
(move (setf b (make-instance 'point)) 50 20)
(move (setf c (make-instance 'point)) 50 40)
(move (setf d (make-instance 'point)) 20 40)
(move (setf e (make-instance 'point)) 15 15)
(setf pl (make-instance 'polygon))
(set-thickness pl 5)
(set-items pl (list a b c d))


(move (set-radius (set-thickness (set-color cr :darkslategrey) 20) 55)
      148
      100)
(set-items (setf pic (make-instance 'picture)) (list cr pl e)) 
(set-color cr :blue)
(set-shape idw pic)
(set-inspected-window irw idw)
|#

(defclass prop-text-shape (text-shape) 
  ((object :initform nil)
  (property :initform nil)))

(defmethod set-object ((shape prop-text-shape) obj)
  (setf (slot-value shape 'object) obj))

(defmethod object ((shape prop-text-shape))
  (slot-value shape 'object))

(defmethod property ((shape prop-text-shape))
  (slot-value shape 'property))

(defmethod set-property ((shape prop-text-shape) value)
  (setf (slot-value shape 'property) value))

(defmethod mouse-down ((shape prop-text-shape) button where)
  (call-next-method)
  ;(print "Zasah")
  shape)

;
;;
;(text (second (items (shape irw))))